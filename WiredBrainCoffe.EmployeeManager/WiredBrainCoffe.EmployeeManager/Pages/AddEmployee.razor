@page "/employees/add"
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
<PageTitle>Add Employee</PageTitle>
<h1>Add Employee</h1>
@if (Employee is not null)
{
    <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="firstname" class="form-label">First Name</label>
            <InputText id="firstname" class="form-control"
                   @bind-Value="@Employee.FirstName" />
            <ValidationMessage For="() => Employee.FirstName" />
        </div>
        <div class="mb-3">
            <label for="lastname" class="form-label">Last Name</label>
            <InputText id="lastname" class="form-control"
                   @bind-Value="@Employee.LastName" />
            <ValidationMessage For="() => Employee.LastName" />
        </div>
        <div class="mb-3">
            <label for="department" class="form-label">Department</label>
            <InputSelect id="department" class="form-select"
                     @bind-Value="@Employee.DepartmentId">
                @if (Departments is not null)
                {
                    @foreach (var department in Departments)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="isDeveloper" class="form-label">Is a Developer</label>
            <InputCheckbox id="isDeveloper" class="form-check-input"
                       @bind-Value="@Employee.IsDeveloper" />
        </div>
        <button type="submit" disabled="@IsBusy" class="btn btn-primary">Add</button>
    </EditForm>
    @if (SuccessMessage is not null)
    {
        <br />
        <div class="alert alert-success">@SuccessMessage</div>
    }
    @if (ErrorMessage is not null)
    {
        <br />
        <div class="alert alert-danger">@ErrorMessage</div>
    }

}

@code {
    public Employee? Employee { get; set; }
    private Department[]? Departments { get; set; }
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }
    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        Departments = await context.Departments.OrderBy(dept => dept.Name).ToArrayAsync();
        Employee = new()
            {
                DepartmentId = Departments.FirstOrDefault()?.Id
            };
    }

    public async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }
        IsBusy = true;
        try
        {
            if (Employee is not null)
            {
                using var context = ContextFactory.CreateDbContext();
                context.Employees.Add(Employee);
                await context.SaveChangesAsync();
                SuccessMessage = $"Successfully added {Employee.FirstName} {Employee.LastName}";

                Employee = new()
                    {
                        DepartmentId = Employee.DepartmentId // keep the same department
                    };
            }
        }
        catch (Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error Adding Employee: {ex.Message}";
        }
        IsBusy = false;
    }
    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }
}
