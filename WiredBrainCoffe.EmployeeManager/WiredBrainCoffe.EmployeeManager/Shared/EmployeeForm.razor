@if (Employee is not null)
{
    <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="firstname" class="form-label">First Name</label>
            <InputText id="firstname" class="form-control"
                   @bind-Value="@Employee.FirstName" />
            <ValidationMessage For="() => Employee.FirstName" />
        </div>
        <div class="mb-3">
            <label for="lastname" class="form-label">Last Name</label>
            <InputText id="lastname" class="form-control"
                   @bind-Value="@Employee.LastName" />
            <ValidationMessage For="() => Employee.LastName" />
        </div>
        <div class="mb-3">
            <label for="department" class="form-label">Department</label>
            <InputSelect id="department" class="form-select"
                     @bind-Value="@Employee.DepartmentId">
                @if (Departments is not null)
                {
                    @foreach (var department in Departments)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="isDeveloper" class="form-label">Is a Developer</label>
            <InputCheckbox id="isDeveloper" class="form-check-input"
                       @bind-Value="@Employee.IsDeveloper" />
        </div>
        <button type="submit" disabled="@IsBusy" class="btn btn-primary">Add</button>
    </EditForm>
}
@code {
    [Parameter]
    public Employee? Employee { get; set; }
    [Parameter]
    public Department[]? Departments { get; set; }
    [Parameter]
    public bool IsBusy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }

    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
        
    }
}
